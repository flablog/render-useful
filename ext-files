#!/bin/bash
#+
# This script displays information about a specified .blend file,
# namely external image and font files that it depends on, output
# in JSON format. Invoke it as follows:
#
#     ext-files [options...] blendfile
#
# where the only option is
#
#    --blender=blender
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

blender=blender
for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    else
        echo "$0: bad option $opt" 1>&2
        exit 3
    fi
done
if [ -z "$(type -p "$blender")" ]; then
    echo "$0: no such executable “$blender”" 1>&2
    exit 3
fi
if [ $# != 1 ]; then
    echo $'Usage:\n\t'"$0" $'<blendfile>\n' 1>&2
    exit 3
fi
blendfile="$1"

exec "$blender" 5>&1 1>/dev/null -b "$blendfile" -P <(cat <<'EOD'
import sys
import os
import json
import bpy

out = os.fdopen(5, "w")
  # use a different fd from stdout, only way it seems to avoid
  # output being polluted by Blender’s messages

out.write \
  (
    "{\n"
    "    \"images\":\n"
    "      ["
  )
first = True
for image in bpy.data.images :
    if image.type == "IMAGE" and image.packed_file == None :
        if first :
            first = False
        else :
            out.write(",")
        #end if
        out.write \
          (
                "\n        {\n"
                "            \"name\": %(name)s,\n"
                "            \"filepath\": %(filepath)s,\n"
                "            \"filepath_raw\": %(filepath_raw)s\n"
                "        }"
            %
                {
                    "name" : json.dumps(image.name),
                    "filepath" : json.dumps(image.filepath),
                    "filepath_raw" : json.dumps(image.filepath_raw),
                }
          )
    #end if
#end for
out.write \
  (
    "\n      ],\n"
    "    \"fonts\":\n"
    "      ["
  )
first = True
for font in bpy.data.fonts :
    if font.packed_file == None and font.filepath != "<builtin>" :
        if first :
            first = False
        else :
            out.write(",")
        #end if
        out.write \
          (
                "\n        {\n"
                "            \"name\": %(name)s,\n"
                "            \"filepath\": %(filepath)s\n"
                "        }"
            %
                {
                    "name" : json.dumps(font.name),
                    "filepath" : json.dumps(font.filepath),
                }
          )
    #end if
#end for
out.write \
  (
    "\n      ]\n"
  )
out.write("}\n")
EOD
)
