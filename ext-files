#!/bin/bash
#+
# This script displays information about a specified .blend file,
# namely external image, library, font and sound files that it
# depends on, output in JSON format. Invoke it as follows:
#
#     ext-files [options...] blendfile
#
# where the only option is
#
#    --blender=blender
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

blender=blender
for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    else
        echo "$0: bad option $opt" 1>&2
        exit 3
    fi
done
if [ -z "$(type -p "$blender")" ]; then
    echo "$0: no such executable “$blender”" 1>&2
    exit 3
fi
if [ $# != 1 ]; then
    echo $'Usage:\n\t'"$0" $'<blendfile>\n' 1>&2
    exit 3
fi
blendfile="$1"

exec "$blender" 5>&1 1>/dev/null -b "$blendfile" -P <(cat <<'EOD'
import sys
import os
import json
import bpy

out = os.fdopen(5, "w")
  # use a different fd from stdout, only way it seems to avoid
  # output being polluted by Blender’s messages

out.write("{")
first_cat = True
for \
    category, match, mismatch, extra \
in \
    (
        ("images", {"type" : "IMAGE"}, {}, ("filepath_raw",)),
        ("libraries", {}, {}, ()),
        ("fonts", {}, {"filepath" : "<builtin>"}, ()),
        ("sounds", {}, {}, ()),
    ) \
:
    if first_cat :
        first_cat = False
    else :
        out.write(",")
    #end if
    out.write("\n    %s:\n        [" % json.dumps(category))
    first_item = True
    for item in getattr(bpy.data, category) :
        if (
                item.packed_file == None
            and
                not any(getattr(item, k) == mismatch[k] for k in mismatch)
            and
                all(getattr(item, k) == match[k] for k in match)
        ) :
            if first_item :
                first_item = False
            else :
                out.write(",")
            #end if
            out.write("\n            {")
            first_attr = True
            for attr in ("name", "filepath") + extra :
                if first_attr :
                    first_attr = False
                else :
                    out.write(",")
                #end if
                out.write \
                  (
                        "\n                %s: %s"
                    %
                        (json.dumps(attr), json.dumps(getattr(item, attr)))
                  )
            #end for
            out.write("\n            }")
        #end if
    #end for
    out.write("\n        ]")
#end for
out.write("\n}\n")
EOD
)
